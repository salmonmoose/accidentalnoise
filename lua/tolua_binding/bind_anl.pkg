// tolua++ Binding package for Accidental Noise Library

$#include "anl.h"

namespace anl
{
	enum EMappingModes
    {
        SEAMLESS_NONE,
        SEAMLESS_X,
        SEAMLESS_Y,
        SEAMLESS_Z,
        SEAMLESS_XY,
        SEAMLESS_XZ,
        SEAMLESS_YZ,
        SEAMLESS_XYZ
    };
	
	enum EBasisTypes
    {
        VALUE,
        GRADIENT,
        GRADVAL,
        SIMPLEX,
        WHITE
    };

    enum EInterpTypes
    {
        NONE,
        LINEAR,
        CUBIC,
        QUINTIC
    };
	
	enum ECombinerTypes
    {
        ADD,
        MULT,
        MAX,
        MIN,
        AVG
    };
	
	enum EFractalTypes
    {
        FBM,
        RIDGEDMULTI,
        BILLOW,
        MULTI,
        HYBRIDMULTI
	};
	
	enum EFunctionGradientAxis
    {
        X_AXIS,
        Y_AXIS,
        Z_AXIS,
        W_AXIS,
        U_AXIS,
        V_AXIS
    };
	
	enum CompositeChannelsMode
    {
        RGB,
        HSV
    };
	
	class CImplicitModuleBase
	{
		public:
		virtual void setSeed(unsigned int seed);

		virtual double get(double x, double y)=0;
		virtual double get(double x, double y, double z)=0;
		virtual double get(double x, double y, double z, double w)=0;
		virtual double get(double x, double y, double z, double w, double u, double v)=0;
	};
	
	struct SRGBA
    {
        SRGBA();
        SRGBA(float r, float g, float b, float a);
        SRGBA(float v);
		~SRGBA();
		
        float rgba[4];
    };
	
	class CBasePRNG
    {
        public:
        virtual unsigned int get();
        virtual void setSeed(unsigned int s);
        void setSeedTime();
        unsigned int getTarget(unsigned int t);
        unsigned int getRange(unsigned int low, unsigned int high);
        double get01();
    };
	
	class LCG : public CBasePRNG
    {
        public:
        LCG();
		~LCG();
    };

    // The following generators are based on generators created by George Marsaglia
    // They use the static lcg created above for seeding, to initialize various
    // state and tables. Seeding them is a bit more involved than an LCG.
    class Xorshift : public CBasePRNG
    {
        public:
        Xorshift();
		Xorshift();
    };

    class MWC256 : public CBasePRNG
    {
        public:
        MWC256();
		~MWC256();
    };

    class CMWC4096 : public CBasePRNG
    {
        public:
        CMWC4096();
		~CMWC4096();
    };

    class KISS : public CBasePRNG
    {
        public:
        KISS();
		~KISS();
    };
	
	class CRGBAModuleBase
    {
        public:
        void setSeed(unsigned int){};

        virtual SRGBA get(double x, double y)=0;
        virtual SRGBA get(double x, double y, double z)=0;
        virtual SRGBA get(double x, double y, double z, double w)=0;
        virtual SRGBA get(double x, double y, double z, double w, double u, double v)=0;
    };
	
	
	// Implicit modules
	class CImplicitAutoCorrect : public CImplicitModuleBase
    {
        public:
        CImplicitAutoCorrect();
        CImplicitAutoCorrect(double low, double high);
        ~CImplicitAutoCorrect(){}

        void setSource(CImplicitModuleBase *m);
        void setRange(double low, double high);
        void calculate();
	};
	
	class CImplicitBasisFunction : public CImplicitModuleBase
    {
        public:
        CImplicitBasisFunction();
        CImplicitBasisFunction(int type, int interp);
		~CImplicitBasisFunction();

        void setType(int type);
        void setInterp(int interp);
        void setRotationAngle(double ax, double ay, double az, double angle);

        void setSeed(unsigned int seed);
	};
	
	class CImplicitBias : public CImplicitModuleBase
	{
		public:
		CImplicitBias(double b);
		~CImplicitBias();

		void setSource(CImplicitModuleBase *b);
		void setSource(double s);
		void setBias(double b);
		void setBias(CImplicitModuleBase *m);
	};
	
	class CImplicitBlend : public CImplicitModuleBase
    {
    public:
        CImplicitBlend();
        ~CImplicitBlend();

        void setLowSource(CImplicitModuleBase *b);
        void setHighSource(CImplicitModuleBase *b);
        void setControlSource(CImplicitModuleBase *b);
        void setLowSource(double v);
        void setHighSource(double v);
        void setControlSource(double v);
	};
	
	class CImplicitBrightContrast : public CImplicitModuleBase
    {
        public:
        CImplicitBrightContrast();
        ~CImplicitBrightContrast();

        void setSource(CImplicitModuleBase *m);
        void setSource(double v);

        void setBrightness(double b);
        void setContrastThreshold(double t);
        void setContrastFactor(double t);
        void setBrightness(CImplicitModuleBase *m);
        void setContrastThreshold(CImplicitModuleBase *m);
        void setContrastFactor(CImplicitModuleBase *m);
	};
	
	class CImplicitCache : public CImplicitModuleBase
    {
        public:
        CImplicitCache();
        ~CImplicitCache();

        void setSource(CImplicitModuleBase *m);
		void setSource(double v);
	};
	
	class CCellularGenerator
	{
		public:
		CCellularGenerator();
		~CCellularGenerator();
	};
	
	class CImplicitCellular : public CImplicitModuleBase
	{
		public:
		CImplicitCellular();
		CImplicitCellular(double a, double b, double c, double d);
		~CImplicitCellular();

		void setCoefficients(double a, double b, double c, double d);
		void setCellularSource(CCellularGenerator *m);
	};
	
	class CImplicitClamp : public CImplicitModuleBase
    {
        public:
        CImplicitClamp(double low, double high);
        ~CImplicitClamp();

        void setRange(double low, double high);
        void setSource(CImplicitModuleBase *b);
	};
	
	class CImplicitCombiner : public CImplicitModuleBase
    {
        public:
        CImplicitCombiner(unsigned int type);
		~CImplicitCombiner();
		
        void setType(unsigned int type);
        void clearAllSources();
        void setSource(int which, CImplicitModuleBase *b);
	};
	
	class CImplicitConstant : public CImplicitModuleBase
    {
        public:
		CImplicitConstant();
        CImplicitConstant(double c);
        ~CImplicitConstant();

        void setConstant(double c);
	};
	
	class CImplicitCos : public CImplicitModuleBase
    {
        public:
        CImplicitCos();
        ~CImplicitCos();

        void setSource(double v);
        void setSource(CImplicitModuleBase *m);
	};
	
	class CImplicitFloor : public CImplicitModuleBase
	{
		CImplicitFloor();
		~CImplicitFloor();
		
		void setSource(double v);
		void setSource(CImplicitModuleBase *m);
	};
	
	class CImplicitExtractRGBAChannel : public CImplicitModuleBase
    {
        public:
        CImplicitExtractRGBAChannel();
        CImplicitExtractRGBAChannel(int channel);
		~CImplicitExtractRGBAChannel();

        void setSource(CRGBAModuleBase *m);
        void setSource(float r, float g, float b, float a);

        void setChannel(int channel);
	};
	
	class CImplicitFractal : public CImplicitModuleBase
    {
        public:
        CImplicitFractal(unsigned int type, unsigned int basistype, unsigned int interptype);

        void setNumOctaves(int n);
        void setFrequency(double f);
        void setLacunarity(double l);
        void setGain(double g);
        void setOffset(double o);
        void setH(double h);

        void setType(unsigned int t);
        void setAllSourceTypes(unsigned int basis_type, unsigned int interp);
        void setSourceType(int which, unsigned int type, unsigned int interp);
        void overrideSource(int which, CImplicitModuleBase *b);
        void resetSource(int which);
        void resetAllSources();
        void setSeed(unsigned int seed);
        CImplicitBasisFunction *getBasis(int which);
	};
	
	class CImplicitFunctionGradient : public CImplicitModuleBase
    {
        public:
        CImplicitFunctionGradient();
        ~CImplicitFunctionGradient();

        void setSource(double v);
        void setSource(CImplicitModuleBase *m);
        void setAxis(int axis);
        void setSpacing(double s);
	};
	
	class CImplicitGain : public CImplicitModuleBase
	{
		public:
		CImplicitGain(double b);
		~CImplicitGain();

		void setSource(double v);
		void setSource(CImplicitModuleBase *b);
		void setGain(double b);
		void setGain(CImplicitModuleBase *m);
	};
	
	class CImplicitGradient : public CImplicitModuleBase
    {
        public:
        CImplicitGradient();
        ~CImplicitGradient();

        void setGradient(double x1, double x2, double y1, double y2, double z1=0, double z2=0,
        double w1=0, double w2=0, double u1=0, double u2=0, double v1=0, double v2=0);
	};
	
	class CImplicitRGBADotProduct : public CImplicitModuleBase
	{
		public:
        CImplicitRGBADotProduct();
        ~CImplicitRGBADotProduct();

        void setSource1(CRGBAModuleBase *m);
        void setSource1(float r, float g, float b, float a);
        void setSource2(CRGBAModuleBase *m);
        void setSource2(float r, float g, float b, float a);
	};
	
	class CImplicitRotateDomain : public CImplicitModuleBase
	{
		public:
		CImplicitRotateDomain(double ax, double ay, double az, double angle_deg);
		~CImplicitRotateDomain();
		void setSource(CImplicitModuleBase *m);
		void setSource(double v);
		void setAxis(double ax, double ay, double az);
		void setAxis(CImplicitModuleBase *ax, CImplicitModuleBase *ay, CImplicitModuleBase *az);
		void setAxisX(double ax);
		void setAxisY(double ay);
		void setAxisZ(double az);
		void setAxisX(CImplicitModuleBase *ax);
		void setAxisY(CImplicitModuleBase *ay);
		void setAxisZ(CImplicitModuleBase *az);

		void setAngle(double a);
		void setAngle(CImplicitModuleBase *a);
	};
	
	class CImplicitScaleDomain : public CImplicitModuleBase
	{
		public:
		CImplicitScaleDomain();
		CImplicitScaleDomain(double x, double y, double z=1, double w=1, double u=1, double v=1);
		~CImplicitScaleDomain();
		
		void setScale(double x, double y, double z=1, double w=1, double u=1, double v=1);
		void setXScale(double x);
		void setYScale(double x);
		void setZScale(double x);
		void setWScale(double x);
		void setUScale(double x);
		void setVScale(double x);
		void setXScale(CImplicitModuleBase *x);
		void setYScale(CImplicitModuleBase *y);
		void setZScale(CImplicitModuleBase *z);
		void setWScale(CImplicitModuleBase *w);
		void setUScale(CImplicitModuleBase *u);
		void setVScale(CImplicitModuleBase *v);

		void setSource(CImplicitModuleBase *m);
		void setSource(double v);
	};
	
	class CImplicitScaleOffset : public CImplicitModuleBase
	{
		public:
		CImplicitScaleOffset(double scale, double offset);
		~CImplicitScaleOffset();

		void setSource(CImplicitModuleBase *b);
		void setSource(double v);
		void setScale(double scale);
		void setOffset(double offset);
		void setScale(CImplicitModuleBase *scale);
		void setOffset(CImplicitModuleBase *offset);
	};
	
	class CImplicitSelect : public CImplicitModuleBase
	{
		public:
		CImplicitSelect();
		~CImplicitSelect();
		void setLowSource(CImplicitModuleBase *b);
		void setHighSource(CImplicitModuleBase *b);
		void setControlSource(CImplicitModuleBase *b);
		void setLowSource(double v);
		void setHighSource(double v);
		void setControlSource(double v);
		void setThreshold(double t);
		void setFalloff(double f);
		void setThreshold(CImplicitModuleBase *m);
		void setFalloff(CImplicitModuleBase *m);
	};
	
	class CImplicitSin : public CImplicitModuleBase
    {
        public:
        CImplicitSin();
        ~CImplicitSin();

        void setSource(double v);
        void setSource(CImplicitModuleBase *m);
	};
	
	class CImplicitSphere : public CImplicitModuleBase
	{
		public:
		CImplicitSphere();
		~CImplicitSphere();
		void setCenter(double cx,double cy,double cz=0,double cw=0,double cu=0,double cv=0);
		void setCenterX(double cx);
		void setCenterY(double cy);
		void setCenterZ(double cz);
		void setCenterW(double cw);
		void setCenterU(double cu);
		void setCenterV(double cv);
		void setCenterX(CImplicitModuleBase *cx);
		void setCenterY(CImplicitModuleBase *cy);
		void setCenterZ(CImplicitModuleBase *cz);
		void setCenterW(CImplicitModuleBase *cw);
		void setCenterU(CImplicitModuleBase *cu);
		void setCenterV(CImplicitModuleBase *cv);

		void setRadius(double r);
		void setRadius(CImplicitModuleBase *r);
	};
	
	class CImplicitPow : public CImplicitModuleBase
	{
		public:
		CImplicitPow();
		~CImplicitPow();
		
		void setSource(double v);
		void setSource(CImplicitModuleBase *m);
		void setPower(double v);
		void setPower(CImplicitModuleBase *m);
	};
	
	class CImplicitTiers : public CImplicitModuleBase
    {
        public:
        CImplicitTiers();
        CImplicitTiers(int numtiers, bool smooth);
        ~CImplicitTiers();

        void setSource(double v);
        void setSource(CImplicitModuleBase *m);
        void setNumTiers(int numtiers);
        void setSmooth(bool smooth);
	};
	
	class CImplicitTranslateDomain : public CImplicitModuleBase
    {
        public:
        CImplicitTranslateDomain();
        ~CImplicitTranslateDomain();

        void setXAxisSource(CImplicitModuleBase *m);
        void setYAxisSource(CImplicitModuleBase *m);
        void setZAxisSource(CImplicitModuleBase *m);
        void setWAxisSource(CImplicitModuleBase *m);
        void setUAxisSource(CImplicitModuleBase *m);
        void setVAxisSource(CImplicitModuleBase *m);

        void setXAxisSource(double v);
        void setYAxisSource(double v);
        void setZAxisSource(double v);
        void setWAxisSource(double v);
        void setUAxisSource(double v);
        void setVAxisSource(double v);

        void setSource(CImplicitModuleBase *m);
        void setSource(double v);
	};
	
	
	
	// RGBA Functions
	class CRGBABlend : public CRGBAModuleBase
    {
        public:
        CRGBABlend();
        ~CRGBABlend();

        void setLowSource(CRGBAModuleBase *m);
        void setHighSource(CRGBAModuleBase *m);
        void setLowSource(float r, float g, float b, float a);
        void setHighSource(float r, float g, float b, float a);
        void setControlSource(CImplicitModuleBase *m);
        void setControlSource(double v);
	};
	
	class CRGBABlendOps : public CRGBAModuleBase
    {
        public:
        CRGBABlendOps();
        CRGBABlendOps(int src1mode, int src2mode);
        ~CRGBABlendOps();

        void setSrc1Mode(int mode);
        void setSrc2Mode(int mode);
        void setSource1(CRGBAModuleBase *m);
        void setSource2(CRGBAModuleBase *m);
        void setSource1(float r, float g, float b, float a);
        void setSource2(float r, float g, float b, float a);
	};
	
	class CRGBACompositeChannels : public CRGBAModuleBase
    {
        public:
        CRGBACompositeChannels();
        CRGBACompositeChannels(int mode);
        ~CRGBACompositeChannels();

        void setMode(int mode){m_mode=mode;}

        void setRedSource(CImplicitModuleBase *m);
        void setGreenSource(CImplicitModuleBase *m);
        void setBlueSource(CImplicitModuleBase *m);
        void setHueSource(CImplicitModuleBase *m);
        void setSatSource(CImplicitModuleBase *m);
        void setValSource(CImplicitModuleBase *m);
        void setAlphaSource(CImplicitModuleBase *m);

        void setRedSource(double r);
        void setGreenSource(double g);
        void setBlueSource(double b);
        void setAlphaSource(double a);
        void setHueSource(double h);
        void setSatSource(double s);
        void setValSource(double v);
	};
	
	class CRGBAConstant : public CRGBAModuleBase
    {
        public:
        CRGBAConstant();
        CRGBAConstant(SRGBA &r);
        CRGBAConstant(float r, float g, float b, float a);
        ~CRGBAConstant();

        void set(float r, float g, float b, float a);
        void set(SRGBA &r);
	};
	
	class CRGBAHSVToRGBA :public CRGBAModuleBase
    {
        public:
        CRGBAHSVToRGBA();

        void setSource(CRGBAModuleBase *m);
        void setSource(float r, float g, float b, float a);
	};
	
	class CRGBAImplicitGrayscale : public CRGBAModuleBase
    {
        public:
        CRGBAImplicitGrayscale();
        ~CRGBAImplicitGrayscale();

        void setSource(CImplicitModuleBase *m);
	};
	
	class CRGBANormalize : public CRGBAModuleBase
	{
		public:
		CRGBANormalize();
		~CRGBANormalize();
		void setSource(CRGBAModuleBase *m);
		void setSource(float r, float g, float b, float a);
	};
	
	class CRGBARGBAToHSV :public CRGBAModuleBase
    {
        public:
        CRGBARGBAToHSV();

        void setSource(CRGBAModuleBase *m);
        void setSource(float r, float g, float b, float a);
	};
	
	class CRGBARotateColor : public CRGBAModuleBase
    {
        public:
        CRGBARotateColor();
        void setAxis(double ax, double ay, double az);
        void setAxis(CImplicitModuleBase *ax, CImplicitModuleBase *ay, CImplicitModuleBase *az);
        void setAxisX(double ax);
        void setAxisY(double ay);
        void setAxisZ(double az);
        void setAxisX(CImplicitModuleBase *ax);
        void setAxisY(CImplicitModuleBase *ay);
        void setAxisZ(CImplicitModuleBase *az);

        void setNormalizeAxis(bool n){m_normalizeaxis=n;}

        void setAngle(double a);
        void setAngle(CImplicitModuleBase *a);

        void setSource(CRGBAModuleBase *m);
        void setSource(float r, float g, float b, float a);
	};
	
	class CRGBASelect : public CRGBAModuleBase
    {
        public:
        CRGBASelect();
        CRGBASelect(double thresh, double fall);

        void setLowSource(CRGBAModuleBase *m);
        void setHighSource(CRGBAModuleBase *m);
        void setLowSource(float r, float g, float b, float a);
        void setHighSource(float r, float g, float b, float a);
        void setControlSource(CImplicitModuleBase *m);
        void setThreshold(CImplicitModuleBase *m);
        void setFalloff(CImplicitModuleBase *m);
        void setControlSource(double v);
        void setThreshold(double v);
        void setFalloff(double v);
	};

};

namespace anl
{
	struct SMappingRanges
    {
        double mapx0,mapy0,mapz0, mapx1,mapy1,mapz1;
        double loopx0,loopy0,loopz0, loopx1,loopy1,loopz1;

        SMappingRanges();
		~SMappingRanges();
    };
	
	void map2D(int seamlessmode, CArray2Dd &a, CImplicitModuleBase &m, SMappingRanges &ranges, double z);
    void map2DNoZ(int seamlessmode, CArray2Dd &a, CImplicitModuleBase &m, SMappingRanges &ranges);
    void map3D(int seamlessmode, CArray3Dd &a, CImplicitModuleBase &m, SMappingRanges &ranges);

    void mapRGBA2D(int seamlessmode, CArray2Drgba &a, CRGBAModuleBase &m, SMappingRanges &ranges, double z);
    void mapRGBA2DNoZ(int seamlessmode, CArray2Drgba &a, CRGBAModuleBase &m, SMappingRanges &ranges);
    void mapRGBA3D(int seamlessmode, CArray3Drgba &a, CRGBAModuleBase &m, SMappingRanges &ranges);
	
	void saveDoubleArray(char *filename, CArray2Dd *array);
    void saveRGBAArray(char *filename, CArray2Drgba *array);
};

// Utility stuff
class CArray2Dd
{
	public:
	CArray2Dd();
	CArray2Dd(int w, int h);
	~CArray2Dd();
	
	int width();
	int height();
	void resize(int w, int h);
	void set(int x, int y, double v);
	double get(int x, int y);
};

class CArray2Drgba
{
	public:
	CArray2Drgba();
	CArray2Drgba(int w, int h);
	~CArray2Drgba();
	
	int width();
	int height();
	void resize(int w, int h);
	void set(int x, int y, anl::SRGBA v);
	anl::SRGBA get(int x, int y);
};

class CArray3Dd
{
	public:
	CArray3Dd();
	CArray3Dd(int w, int h, int d);
	~CArray3Dd();
	
	int width();
	int height();
	int depth();
	
	void set(int x, int y, int z, double v);
	double get(int x, int y, int z);
	void resize(int w, int h, int d);
};

class CArray3Drgba
{
	public:
	CArray3Drgba();
	CArray3Drgba(int w, int h, int d);
	~CArray3Drgba();
	
	int width();
	int height();
	int depth();
	
	void resize(int w, int h, int d);
	void set(int x, int y, int z, anl::SRGBA v);
	anl::SRGBA get(int x, int y, int z);
};